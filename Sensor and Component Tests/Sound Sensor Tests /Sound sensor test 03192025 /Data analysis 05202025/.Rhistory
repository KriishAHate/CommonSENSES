print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 500  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 600  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 700  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 800  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 900  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
# ===============================
# R Script: Binned dB - Small Hole vs Big Hole
# ===============================
# This script bins dB values from Sensor2 and Sensor3,
# computes averages within each bin, and generates a correlation plot
# between the small hole (6 mm) and large hole (1 inch) configurations.
# ------------------------------
# Set bin interval (in milliseconds)
# ------------------------------
bin_interval <- 1000  # Change as needed
# ------------------------------
# Get time range
# ------------------------------
start_time <- min(data$Timestamp)
end_time <- max(data$Timestamp)
# ------------------------------
# Calculate number of bins (round up to cover full range)
# ------------------------------
n_bins <- ceiling((end_time - start_time) / bin_interval)
# ------------------------------
# Preallocate arrays
# ------------------------------
binned_Timestamps   <- numeric(n_bins)
binned_Sensor2_dB   <- numeric(n_bins)
binned_Sensor3_dB   <- numeric(n_bins)
# ------------------------------
# Loop to compute bin averages
# ------------------------------
for (i in 1:n_bins) {
# Current bin start and end time
t_start <- start_time + (i - 1) * bin_interval
t_end   <- t_start + bin_interval
# Get data in this bin
bin_rows <- data[data$Timestamp >= t_start & data$Timestamp < t_end, ]
# Compute mean values
binned_Timestamps[i]   <- t_start
binned_Sensor2_dB[i]   <- mean(bin_rows$Sensor2_dB)
binned_Sensor3_dB[i]   <- mean(bin_rows$Sensor3_dB)
}
# ------------------------------
# Combine into a data frame
# ------------------------------
binned_dB_small_big_df <- data.frame(
Time = binned_Timestamps,
Sensor2_dB = binned_Sensor2_dB,
Sensor3_dB = binned_Sensor3_dB
)
# ------------------------------
# Regression and correlation analysis
# ------------------------------
model_dB_small_big <- lm(Sensor3_dB ~ Sensor2_dB, data = binned_dB_small_big_df)
slope_dB_small_big <- coef(model_dB_small_big)[2]
intercept_dB_small_big <- coef(model_dB_small_big)[1]
r_squared_dB_small_big <- summary(model_dB_small_big)$r.squared
correlation_dB_small_big <- sqrt(r_squared_dB_small_big)
regression_text_dB_small_big <- paste(
"Slope:", round(slope_dB_small_big, 3), "\n",
"Intercept:", round(intercept_dB_small_big, 3), "\n",
"R-squared:", round(r_squared_dB_small_big, 3), "\n",
"Correlation:", round(correlation_dB_small_big, 3)
)
text_x_dB_small_big <- min(binned_dB_small_big_df$Sensor2_dB) + 0.05 * diff(range(binned_dB_small_big_df$Sensor2_dB))
text_y_dB_small_big <- min(binned_dB_small_big_df$Sensor3_dB) + 0.85 * diff(range(binned_dB_small_big_df$Sensor3_dB))
# ------------------------------
# Plot
# ------------------------------
library(ggplot2)
plot_dB_small_big <- ggplot(binned_dB_small_big_df, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = text_x_dB_small_big, y = text_y_dB_small_big, label = regression_text_dB_small_big, size = 5, hjust = 0) +
ggtitle(paste("Sensor 2 (Small Hole) vs Sensor 3 (Big Hole) - dB (Binned Every", bin_interval, "ms)")) +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
print(plot_dB_small_big)
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = FALSE)
# ===============================
# Plot Sensor 2 vs. Sensor 3 dB Values with Statistics
# ===============================
# ------------------------------
# Compute linear regression
# ------------------------------
# Fit a linear regression model where:
# Sensor3_dB = slope * Sensor2_dB + intercept
model <- lm(Sensor3_dB ~ Sensor2_dB, data = data)
# Display the regression summary in the console
summary(model)
# Extract regression parameters
slope <- coef(model)[2]  # The slope of the regression line
intercept <- coef(model)[1]  # The y-intercept
r_squared <- summary(model)$r.squared  # R-squared value
correlation_coefficient <- sqrt(r_squared)  # Square root of R-squared
# ------------------------------
# Create text annotation for the plot
# ------------------------------
regression_text <- paste(
"Slope:", round(slope, 3), "\n",
"Intercept:", round(intercept, 3), "\n",
"R-squared:", round(r_squared, 3), "\n",
"Correlation:", round(correlation_coefficient, 3)
)
# ------------------------------
# Determine annotation position
# ------------------------------
text_x_pos <- min(data$Sensor2_dB) + (max(data$Sensor2_dB) - min(data$Sensor2_dB)) * 0.05
text_y_pos <- min(data$Sensor3_dB) + (max(data$Sensor3_dB) - min(data$Sensor3_dB)) * 0.85
# ------------------------------
# Create scatter plot with best-fit line
# ------------------------------
plot <- ggplot(data, aes(x = Sensor2_dB, y = Sensor3_dB)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
annotate("text", x = text_x_pos, y = text_y_pos, label = regression_text, size = 5, hjust = 0, color = "black") +
ggtitle("dB Values: Small Hole vs Big Hole") +
xlab("Sensor 2 (dB)") +
ylab("Sensor 3 (dB)") +
theme_minimal()
# ------------------------------
# Display and save the plot
# ------------------------------
print(plot)
ggsave("Sensor2_vs_Sensor3_Correlation_dB_NEW.jpeg", plot = plot, width = 6, height = 4, dpi = 300)
# ------------------------------
# Print regression results to the console
# ------------------------------
cat("\n--- Regression Results (Sensor 2 vs. Sensor 3) ---\n")
cat("Slope:", slope, "\n")
cat("Intercept:", intercept, "\n")
cat("R-squared:", r_squared, "\n")
cat("Correlation Coefficient:", correlation_coefficient, "\n")
